// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: verification_email.sql

package db

import (
    "context"
)

const createVerificationEmail = `-- name: CreateVerificationEmail :one
INSERT INTO verification_emails (
    username,
    email,
    secret_code
) VALUES (
    $1, $2, $3
) RETURNING id, username, email, secret_code, is_used, created_at, expires_at
`

type CreateVerificationEmailParams struct {
    Username   string `json:"username"`
    Email      string `json:"email"`
    SecretCode string `json:"secret_code"`
}

func (q *Queries) CreateVerificationEmail(ctx context.Context, arg CreateVerificationEmailParams) (VerificationEmail, error) {
    row := q.db.QueryRow(ctx, createVerificationEmail, arg.Username, arg.Email, arg.SecretCode)
    var i VerificationEmail
    err := row.Scan(
        &i.ID,
        &i.Username,
        &i.Email,
        &i.SecretCode,
        &i.IsUsed,
        &i.CreatedAt,
        &i.ExpiresAt,
    )
    return i, err
}

const updateVerificationEmail = `-- name: UpdateVerificationEmail :one
UPDATE verification_emails
SET
    is_used = TRUE
WHERE
    id = $1
    AND secret_code = $2
    AND is_used = FALSE
    AND expires_at > now()
RETURNING id, username, email, secret_code, is_used, created_at, expires_at
`

type UpdateVerificationEmailParams struct {
    ID         int64  `json:"id"`
    SecretCode string `json:"secret_code"`
}

func (q *Queries) UpdateVerificationEmail(ctx context.Context, arg UpdateVerificationEmailParams) (VerificationEmail, error) {
    row := q.db.QueryRow(ctx, updateVerificationEmail, arg.ID, arg.SecretCode)
    var i VerificationEmail
    err := row.Scan(
        &i.ID,
        &i.Username,
        &i.Email,
        &i.SecretCode,
        &i.IsUsed,
        &i.CreatedAt,
        &i.ExpiresAt,
    )
    return i, err
}
